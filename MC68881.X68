*-----------------------------------------------------------
* Program    : MC68881 Driver by Motorola
* Written by : Eugene Rockey
* Date       : March 19th, 2011
* Description: Drive the MC68881 FPU as a peripheral device.
*-----------------------------------------------------------
*
*	MC68881 FLOATING POINT INSTRUCTION CODES
*
************************************************************
FMOVE	EQU	$00	MOVE
FINT	EQU	$01	INTEGER PART
FSINH	EQU	$02	SINH
FSQRT	EQU	$04	SQUARE ROOT
FLOGNP1	EQU	$06	LOGN(1+x)
FETOXM1	EQU	$08	((e^x)-1)
FTANH	EQU	$09	TANH
FATAN	EQU	$0A	ARCTAN
FASIN	EQU	$0C	ARCSIN
FATANH	EQU	$0D	ARCTANH
FSIN	EQU	$0E	SINE
FTAN	EQU	$0F	TANGENT
FETOX	EQU	$10	e^x
FTWOTOX	EQU	$11	2^x
FTENTOX	EQU	$12	10^x
FLOGN	EQU	$14	LOGN
FLOG10	EQU	$15	LOG10
FLOG2	EQU	$16	LOG2
FABS	EQU	$18	ABSOUTE VALUE
FCOSH	EQU	$19	COSH
FNEG	EQU	$1A	NEGATE
FACOS	EQU	$1C	ARCCOS
FCOS	EQU	$1D	COSINE
FGETEXP	EQU	$1E	GET EXPONENT
FGETMAN	EQU	$1F	GET MANTISSA
FDIV	EQU	$20	DIVIDE
FMOD	EQU	$21	MODULO REMAINDER
FADD	EQU	$22	ADD
FMUL	EQU	$23	MULTIPLY
FSGLDIV	EQU	$24	SINGLE DIVIDE
FREM	EQU	$25	IEEE REMAINDER
FSCALE	EQU	$26	SCALE EXPONENT
FSGLMUL	EQU	$27	SINGLE MULTIPLY
FSUB	EQU	$28	SUBTRACT
FCMP	EQU	$38	COMPARE
FTST	EQU	$3A	TEST
FSINCOS	EQU	$30	SIMULTANEOUS FP SINE AND COSINE
********************************************************
*
*	MC68881 INSTRUCTION CODES FOR CONDITIONAL BRANCHING
*
*******************************************************
EQ	EQU	$01	EQUAL
NEQ	EQU	$0E	NOT EQUAL
GT	EQU	$12	GREATER THAN
NGT	EQU	$1D	NOT GREATER THAN
GE	EQU	$13	GREATER THAN OR EQUAL
NGE	EQU	$1C	NOT(GREATER THAN OR EQUAL)
LT	EQU	$14	LESS THAN
NLT	EQU	$1B	NOT LESS THAN
LE	EQU	$15	LESS THAN OR EQUAL
NLE	EQU	$1A	NOT(LESS THAN OR EQUAL)
GL	EQU	$16	GREATER OR LESS THAN
NGL	EQU	$19	NOT(GREATER OR LESS THAN)
GLE	EQU	$17	GREATER OR LESS OR EQUAL
NGLE	EQU	$18	NOT(GREATER OR LESS OR EQUAL)
OGT	EQU	$02	ORDERED GREATER THAN
ULE	EQU	$0D	UNORDERED OR LESS OR EQUAL
OGE	EQU	$03	ORDERED GREATER THAN OR EQUAL
ULT	EQU	$0C	UNORDERED OR LESS THAN
OLT	EQU	$04	ORDERED LESS THAN
UGE	EQU	$0B	UNORDERED OR GREATER OR EQUAL
OLE	EQU	$05	ORDERED LESS THAN OR EQUAL
UGT	EQU	$0A	UNORDERED OR GREATER
OGL	EQU	$06	ORDERED GREATER OR LESS THAN
UEQ	EQU	$09	UNORDERED OR EQUAL
OR	EQU	$07	ORDERED
UN	EQU	$08	UNORDERED
F	EQU	$00	FALSE (NEVER BRANCH)
T	EQU	$0F	TRUE (ALWAYS BRANCH)
SF	EQU	$10	SIGNALING FALSE (NEVER BRANCH)
ST	EQU	$1F	SIGNALING TRUE (ALWAYS BRANCH)
SEQ	EQU	$11	SIGNALING EQUAL
SNEQ	EQU	$1E	SIGNALING NOT EQUAL
***********************************************************************
*
*	THESE ARE THE MC68881 INTERNAL REGISTERS FOR THE BASE 
*	ADDRESS $80000 (MC68881 ADAPTER BOARD)
*
***********************************************************************
MC68881		EQU	$80000	MC68881 BASE ADDRESS
COMMAND		EQU	$0A	COMMAND REGISTER
RESPONSE	EQU	$00	RESPONSE REGISTER
OPER		EQU	$10	OPERAND REGISTER
COND		EQU	$0E	CONDITION REGISTER
SAVE		EQU	$04	SAVE REGISTER
RESTORE		EQU	$06	RESTORE REGISTER
REGSEL		EQU	$14	REGISTER SELECT
CONTROL		EQU	$9000	MC68881 CONTROL REGISTER
STATUS		EQU	$8800	MC68881 STATUS REGISTER
IADDRESS	EQU	$8400	MC68881 INSTRUCTION ADDRESS REGISTER
TFBIT		EQU	$0	TRUE/FALSE BIT OF THE RESPONSE REGISTER
*************************************************************************
*
*	THE FLOATING POINT REGISTERS
*
*************************************************************************
FP0	EQU	$00	FLOATING POINT REGISTER #0
FP1	EQU	$01	""	""	""	#1
FP2	EQU	$02	""	""	""	#2
FP3	EQU	$03	""	""	""	#3
FP4	EQU	$04	""	""	""	#4
FP5	EQU	$05	""	""	""	#5
FP6	EQU	$06	""	""	""	#6
FP7	EQU	$07	""	""	""	#7
************************************************************************

*************************************************************************
*
*	MC68881 SINGLE PRECISION FP-REG. VALUE TO MEMORY OPERATION
*	SYNTAX: REGMENS INSTRUCTION,FPM,<EA>
*	WHERE: INSTRUCTION = FP INSTRUCTION NUEMONIC (I.E. FMOVE)
*		FPM = SOURCE FP REGISTER
*		<EA> = DESTINATION ADDRESSING MODE
*	NO REGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: DN, (AN)+, -(AN), D(AN), D(AN,IX), XXX.W, XXX.L,
*				(D,PC), D(PC,IX)
*
*************************************************************************
REGMENS		MACRO
		IFC '\4',''
		MOVE.W	#$6400+(\2<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	MC68881+OPER,\3
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFNC	'\4',''
		MOVE.W	#$6400+(\2<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	MC68881+OPER,\3,\4
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDM
*************************************************************************
*
*	MC68881 LONG WORD LENGTH FP-REG. VALUE TO MEMORY OPERATION
*	SYNTAX: REGMEML INSTRUCTION,FPM,<EA>
*	INSTRUCTION = FP INSTRUCTION NUEMONIC (I.E. FMOVE)
*			FPM = SOURCE FP REGISTER
*			<EA> = DESTINATION ADDRESSING MODE
*	NO REGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: DN, (AN)+, -(AN), D(AN), D(AN,IX), XXX.W, XXX.L,
*				(D,PC), D(PC,IX)
*
*************************************************************************
REGMEML		MACRO
		IFC '\4',''
		MOVE.W 	#$6000+(\2<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	MC68881+OPER,\3
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFNC '\4',''
		MOVE.W	#$6000+(\2<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	MC68881+OPER,\3,\4
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDM
*************************************************************************
*
*	MC68881 WORD LENGTH FP-REG. VALUE TO MEMORY OPERATION
*	SYNTAX: REGMEMW INSTRUCTION,FPM,<EA>
*	INSTRUCTION = FP INSTRUCTION NUEMONIC (I.E. FMOVE)
*			FPM = SOURCE FP REGISTER
*			<EA> = DESTINATION ADDRESSING MODE
*	NO REGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: DN, (AN)+, -(AN), D(AN), D(AN,IX), XXX.W, XXX.L,
*				(D,PC), D(PC,IX)
*
*************************************************************************
REGMEMW		MACRO
		IFC '\4',''
		MOVE.W 	#$7000+(\2<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.W	MC68881+OPER,\3
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFNC '\4',''
		MOVE.W	#$7000+(\2<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.W	MC68881+OPER,\3,\4
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDM
*************************************************************************
*
*	MC68881 BYTE LENGTH FP-REG. VALUE TO MEMORY OPERATION
*	SYNTAX: REGMEMW INSTRUCTION,FPM,<EA>
*	INSTRUCTION = FP INSTRUCTION NUEMONIC (I.E. FMOVE)
*			FPM = SOURCE FP REGISTER
*			<EA> = DESTINATION ADDRESSING MODE
*	NO REGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: DN, (AN)+, -(AN), D(AN), D(AN,IX), XXX.W, XXX.L,
*				(D,PC), D(PC,IX)
*
*************************************************************************
REGMEMB		MACRO
		IFC '\4',''
		MOVE.W 	#$7800+(\2<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.B	MC68881+OPER,\3
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFNC '\4',''
		MOVE.W	#$7800+(\2<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.B	MC68881+OPER,\3,\4
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDM
****************************************************************************
*
*	MC68881 DOUBLE PRECISION FP-REG. VALUE TO MEMORY OPERATION
*	SYNTAX: REGMEND INSTRUCTION,FPM,<EA>
*	WHERE: INSTRUCTION = FP INSTRUCTION NUEMONIC (I.E. FMOVE)
*		FPM = SOURCE FP REGISTER
*		<EA> = AN ADDRESS REGISTER, SURROUNDED BY PARENTHESIS,
*			CONTAINING THE PREVIOUSLY LOADED EFFECTIVE ADDRESS
*			(I.E. (A0)).
*	NO REGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: (AN)
*
****************************************************************************
REGMEMD		MACRO
		MOVE.W	#$7400+(\2<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	MC68881+OPER,\3
		MOVE.L	MC68881+OPER,4\3
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDM
****************************************************************************
*
*	MC68881 EXTENDED PRECISION FP-REG. VALUE TO MEMORY OPERATION
*	SYNTAX: REGMEMX INSTRUCTION,FPM,<EA>
*	WHERE: INSTRUCTION = FP INSTRUCTION NUEMONIC (I.. FMOVE)
*		FPM = SOURCE FP REGISTER
*		<EA> = AN ADDRESS REGISTER, SURROUNDED BY PARENTHESIS,
*		CONTAINING THE PREVIOUSLY LOADED EFFECTIVE ADDRESS (I.E. (A0)).
*	NO REGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: (AN)
*
*****************************************************************************
REGMEMX		MACRO
		MOVE.W	#$6800+(\2<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	MC68881+OPER,\3
		MOVE.L	MC68881+OPER,4\3
		MOVE.L	MC68881+OPER,8\3
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDM
*****************************************************************************
*
*	MC68881 MOVE BYTE IN MEMORY OR IN Dn TO FP-REG. OPERATION
*	SYNTAX: MEMREGB INSTRUCTION,<EA>,FPN
*	WHERE: INSTRUCTION = FP INSTRUCTION NUEMONIC (I.E. FADD)
*		<EA> = SOURCE ADDRESSING MOD
*		FPN = DESTINATION REGISTER
*	NO REGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: DN, (AN)+, -(AN), D(AN), D(AN,IX), XXX.W, XXX.L,
*				(D,PC), D(PC,IX)
*	THE COMMENTED OUT CODE SHOWS HOW A USER MAY IMPLEMENT FSINCOS IN A MEM. TO REG.
*	TRANSFER USING THE FOLLOWING INSTRUCTION FORMAT:
*	MEMREGB INSTRUCTION,<EA>,FPN,FPQ (FPQ = 2ND DESTINATION REG.)
*
*****************************************************************************
MEMREGB		MACRO
		IFC	'\1','FSINCOS'
		IFC	'\5',''
		MOVE.W	#$5800+(\4<<7)+\3+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		
		MOVE.B	\2,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFNC	'\5',''
		MOVE.W	#$5800+(\5<<7)+\4+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		
		MOVE.B	\2,\3,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDC
		IFNC	'\1','FSINCOS'
		IFC	'\4',''
		MOVE.W	#$5800+(\3<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		
		MOVE.B	\2,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFNC	'\4',''
		MOVE.W	#$5800+(\4<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		
		MOVE.B	\2,\3,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDC
		ENDM
********************************************************************************
*
*	MC68881 MOVE WORD IN MEMORY OR IN Dn TO FP-REG. OPERATION
*	SYNTAX: MEMREGW INSTRUCTION,<EA>,FPN
*	WHERE: INSTRUCTION = FP INSTRUCTION NUEMONIC (I.E. FADD)
*		<EA> = SOURCE ADDRESSING MOD
*		FPN = DESTINATION REGISTER
*	NO REGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: DN, (AN)+, -(AN), D(AN), D(AN,IX), XXX.W, XXX.L,
*				(D,PC), D(PC,IX)
*
********************************************************************************
MEMREGW		MACRO
		IFC	'\4',''
		MOVE.W	#$5000+(\3<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.W	\2,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFNC	'\4',''
		MOVE.W	#$5000+(\4<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.W	\2,\3,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDM
*****************************************************************************
*
*	MC68881 LONG WORD IN MEMORY OR IN Dn TO FP-REG. OPERATION
*	SYNTAX: MEMREGL INSTRUCTION,<EA>,FPN
*	WHERE: INSTRUCTION = FP INSTRUCTION NUEMONIC (I.E. FADD)
*		<EA> = SOURCE ADDRESSING MOD
*		FPN = DESTINATION REGISTER
*	NO REGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: DN, (AN)+, -(AN), D(AN), D(AN,IX), XXX.W, XXX.L,
*				(D,PC), D(PC,IX)
*
*******************************************************************************
MEMREGL		MACRO
		IFC	'\4',''
		MOVE.W	#$4000+(\3<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	\2,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFNC	'\4',''
		MOVE.W	#$4000+(\4<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	\2,\3,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDM
*****************************************************************************
*
*	MC68881 SINGLE PRECISION VALUE MEMORY TO FP-REG. OPERATION
*	SYNTAX: MEMREGS INSTRUCTION,<EA>,FPN
*	WHERE: INSTRUCTION=FP INSTRUCTION NUEMONIC (I.E. FADD)
*		<EA>=SOURCE ADDRESSING MODE
*		FPN=DESTINATION REGISTER
*	NO REGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: DN, (AN)+, -(AN), D(AN), D(AN,IX)
*				XXX.W, XXX.L, (D,PC), D(PC,IX)
*
******************************************************************************
		
MEMREGS		MACRO
		IFC	'\4',''
		MOVE.W	#$4400+(\3<<7)+1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		
		MOVE.L	\2,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFNC	'\4',''
		MOVE.W	#$4400+(\4<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		
		MOVE.L	\2,\3,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDM
*******************************************************************************
*
*	MC68881 DOUBLE PRECISION VALUE MEMORY TO FP-REG. OPERATION
*	SYNTAX: MEMREGD	INSTRUCTION,<EA>,FPN
*	WHERE: INSTRUCTION=FP INSTRUCTION NUEMONIC (I.E. FADD)
*		<EA>=SOURCE ADDRESS REGISTER, SURROUNDED BY PARENTHESIS,
*		CONTAINING THE PREVIOUSLY ENTERED ADDRESSING MODE
*		(I.E. (AN)).
*		FPN=DESTINATION REGISTER
*		NO REGISTERS MODIFIED OR DESTROYED
*		VALID ADDRESSING MODES: (AN)
*
******************************************************************************
MEMREGD		MACRO
		MOVE.W	#$5400+#$0200+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	\2,MC68881+OPER
		MOVE.L	4\2,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDM
*********************************************************************************
*
*	MC68881 EXTENDED PRECISION VALUE MEMORY TO FP-REG. OPERATION
*	SYNTAX: MEMREGX INSTRUCTION,<EA>,FPN
*	WHERE: INSTRUCTION=FP INSTRUCTION NUEMONIC (I.E. FADD)
*	<EA>=SOURCE ADDRESS REGISTER,SURROUNDED BY PARENTHESIS,
*		CONTAINING THE PREVIOUSLY ENTERED ADDRESSING MODE
*		(I.E. (AN)).
*	FPN=DESTINATION REGISTER
*	NOREGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: (AN)
*
******************************************************************************
MEMREGX		MACRO
		MOVE.W	#$4800+(\3<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	\2,MC68881+OPER
		MOVE.L	4\2,MC68881+OPER
		MOVE.L	8\2,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDM
*****************************************************************************
*
*	MC68881 PACKED BCD VALUE MEMORY TO FP-REG. OPERATION
*	SYNTAX: MEMREGP INSTRUCTION,<EA>,FPN
*	WHERE: INSTRUCTION=FP INSTRUCTION NUEMONIC (I.E. FADD)
*		<EA>=SOURCE ADDRESS REGISTER, SURROUNDED BY PARENTHESIS,
*		CONTAINING THE PREVIOUSLY ENTERED ADDRESSING MODE
*		(I.E. (AN)).
*		FPN=DESTINATION REGISTER
*	NO REGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: (AN)
*
*****************************************************************************
MEMREGP		MACRO
		MOVE.W	#$4C00+(\3<<7)+\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	\2,MC68881+OPER
		MOVE.L	4\2,MC68881+OPER
		MOVE.L	8\2,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDM
******************************************************************************
*
*	MC68881 FP-REG. TO FP-REG. OPERATION
*	SYNTAX: REGREG INSTRUCTION,FPM,FPN,FNQ
*	WHERE: INSTRUCTION=NUEMONIC FOR THE FP INSTRUCTION (I.E. FADD)
*		FPM=FP SOURCE REGISTER
*		FPN=FP DESTINATION REGISTER
*		FNQ=SECOND FP DESTINATION REGISTER FOR FSINCOS
*	NO REGISTERS MODIFIED OR DESTROYED
*
*****************************************************************************
REGREG		MACRO
		IFC	'\1','FSINCOS'
		MOVE.W	#(\2<<10)+(\4<<7)+\3+\1,MC68881+COMMAND
\@NULCA		TST.B	MC68881+RESPONSE
		BMI.S	\@NULCA
		ENDC
		IFNC	'\1','FSINCOS'
		MOVE.W	#(\2<<10)+(\3<<7)+\1,MC68881+COMMAND
\@NULCA		TST.B	MC68881+RESPONSE
		BMI.S	\@NULCA
		ENDC
		ENDM
******************************************************************************
*
*	MC68881 CONSTANT IN ROM TO FP-REG. OPERATION
*	SYNTAX: FMOVEROM CC,FPN
*	WHERE:	CC = MC68881 CONSTANT
*		$00	PI
*		$0B	LOG10(2)
*		$0C	E
*		$0D	LOG2(E)
*		$0E	LOG10(E)
*		$0F	0.0
*		$30	LOGN(2)
*		$31	LOGN(10)
*		$32	10^0
*		$33	10^1
*		$34	10^2
*		$35	10^4
*		$36	10^8
*		$37	10^16
*		$38	10^32
*		$39	10^64
*		$3A	10^128
*		$3B	10^256
*		$3C	10^512
*		$3D	10^1024
*		$3E	10^2048
*		$3F	10^4096
*		FPN=FP DESTINATION REGISTER
*		NO REGISTERS MODIFIED OR DESTROYED
*
******************************************************************************
		
FMOVEROM	MACRO
		MOVE.W	#$5C00+(\2<<7)+\1,MC68881+COMMAND
\@NULCA		TST.B	MC68881+RESPONSE
		BMI.S	\@NULCA
		ENDM
*****************************************************************************
*
*	MC68881 CONDITIONAL BRANCH
*	SYNTAX: FBCC.<SIZE> CONDITION, ADDRESS
*	WHERE: <SIZE>=ALLOWABLE BRANCH SIZES
*		CONDITION=CC, THE FLOATING POINT CONDITION (I.E. GT)
*		ADDRESS=BRANCH ADDRESS
*	REGISTERS MODIFIED OR DESTROYED: D0
*
*****************************************************************************
		
FBCC		MACRO
		MOVE.W	#\1,MC68881+COND
\@NOPASS	MOVE.W	MC68881+RESPONSE,D0
		BMI.S	\@NOPASS
		BTST	#TFBIT,D0
		BNE.\0	\2
		ENDM
****************************************************************************
*
*	MC68881 TEST FP CONDITION, DECREMENT, AND BRANCH
*	SYNTAX: FDBCC CONDITION, DN, ADDRESS
*	WHERE: CONDITION=CC, FLOATING POINT CONDITION
*		DN= MAIN PROCESSOR DATA REGISTER TO BE DECREMENTED
*		ADDRESS=BRANCH ADDRESS
*	REGISTERS MODIFIED OR DESTROYED D0
*
***************************************************************************
		
FDBCC		MACRO
		MOVE.W	#\1,MC68881+COND
\@NOPASS	MOVE.W	MC68881+RESPONSE,D0
		BMI.S	\@NOPASS
		BTST	#TFBIT,D0
		DBNE	\2,\3
		ENDM
******************************************************************************
*
*	MC68881 CONDITIONAL SET
*	SYNTAX: FSCC CONDITION,ADDRESS
*	WHERE: CONDITION=CC, FLOATING POINT CONDITION
*		ADDRESS=BRANCH ADDRESS
*	REGISTERS MODIFIED OR DESTROYED D0
*
***************************************************************************
		
FSCC		MACRO
		MOVE.W	#\1,MC68881+COND
\@NOPASS	MOVE.W	MC68881+RESPONSE,D0
		BMI.S	\@NOPASS
		BTST	#TFBIT,D0
		BNE	\2
		ENDM
****************************************************************************************
*
*	MC68881 FP MOVE MULTIPLE COPROCESSOR REGISTERS TO MEMORY
*	SYNTAX: FMOVEMRM FPR0,FPR1,FPR2,FPR3,FPR4,FPR5,FPR6,FPR7,<EA>,PREDECREMENT
*	WHERE:  FPR0=(FP REG. #0) 1 IF SELECTED, 0 IF NOT
*		FPR1=(   "    #1) "		"
*		FPR2=(   "    #2) "		"
*		FPR3=(   "    #3) "		"
*		FPR4=(   "    #4) "		"
*		FPR5=(   "    #5) "		"
*		FPR6=(   "    #6) "		"
*		FPR7=(   "    #7) "		"
*		<EA>=DESTINATION ADDRESSING MODE
*		PREDECREMENT=Y (IF PREDECREMENT MODE IS BEING USED), OR
*			      N (IF OTHER MODE IS BEING USED)
*	REGISTERS MODIFIED OR DESTROYED: A0, D0, D1, D2, D3
*	VALID ADDRESSING MODES: AN, -(AN), D(AN), D(AN,IX)
*				XXX.W, XXX.L
*
*****************************************************************************
FMOVEMRM	MACRO
		IFC	'\A','Y'
		MOVE.W	#$E000+%\8\7\6\5\4\3\2\1,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVEQ	#\1+\2+\3+\4+\5+\6+\7+\8-1,D3
		TST.W	MC68881+REGSEL
		MOVE.L	MC68881+OPER,A0
\@AGAIN		MOVE.L	(A0),D0
		MOVE.L	(A0),D1
		MOVE.L	(A0),D2
		MOVEM.L	D0-D2,\9
		DBRA	D3,\@AGAIN
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFC	'\A','N'
		MOVE.W	#$F000+%\1\2\3\4\5\6\7\8,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVEQ.L	#(\8+\7+\6+\5+\4+\3+\2+\1)*3-1,D0
		TST.W	MC68881+REGSEL
		LEA	\9,A0
\@AGAIN		MOVE.L	MC68881+OPER,(A0)+
		DBRA	D0,\@AGAIN
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDM
****************************************************************************************
*
*	MC68881 FP MOVE TO MULTIPLE COPROCESSOR REGISTERS FROM MEMORY
*	SYNTAX: FMOVEMMR <EA>,FPR0,FPR1,FPR2,FPR3,FPR4,FPR5,FPR6,FPR7,POSTINCREMENT
*	WHERE: <EA>=DESTINATION ADDRESSING MODE
*		FPR0=(FP REG. #0) 1 IF SELECTED, 0 IF NOT
*		FPR1=(   "    #1) "		"
*		FPR2=(   "    #2) "		"
*		FPR3=(   "    #3) "		"
*		FPR4=(   "    #4) "		"
*		FPR5=(   "    #5) "		"
*		FPR6=(   "    #6) "		"
*		FPR7=(   "    #7) "		"
*		POSTINCREMENT=Y (IF POST-INCREMENT MODE IS BEING USED)
*			      N (IF OTHER VALID MODE IS BEING USED)
*	REGISTERS MODIFIED OR DESTROYED: A0, D0
*	VALID ADDRESSING MODES: AN, (AN)+, D(AN), D(AN,IX)
*				XXX.W, XXX.L, (D,PC),D(PC,IX)
*
*****************************************************************************
FMOVEMMR	MACRO
		MOVE.W	#$D000+%\2\3\4\5\6\7\8\9,MC68881+COMMAND
\@NULCA		CMPI	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVEQ.L	#(\9+\8+\7+\6+\5+\4+\3+\2)*3-1,D0
		TST.W	MC68881+REGSEL
		IFC	'\A','N'
		LEA	\1,A0
\@AGAIN		MOVE.L	(A0)+,MC68881+OPER
		DBRA	D0,\@AGAIN
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFC	'\A','Y'
\@AGAIN		MOVE.L	\1,MC68881+OPER
		DBRA	D0,\@AGAIN
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDM

****************************************************************************
*
*	MC68881 FP MOVE TO CONTROL, STATUS, OR INSTRUCTION ADDRESS REGISTER
*	SYNTAX: MOVINCSI <EA>,REGISTER
*	WHERE: <EA>=VALID SOURCE ADDRESSING MODE
*		REGISTER=CONTROL, STATUS, OR IADDRESS
*	NO REGISTERS MODIFIED OR DESTROYED
*	VALID ADDRESSING MODES: DN, AN, (AN)+, -(AN), D(AN), D(AN,IX)
*				XXX.W, XXX.L, (D,PC), D(PC,IX)
*
******************************************************************************
MOVINCSI	MACRO
		IFC	'\3',''
		MOVE.W	#\2,MC68881+COMMAND
\@NULCA		CMPI.W	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	\1,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFNC	'\3',''
		MOVE.W	#\3,MC68881+COMMAND
\@NULCA		CMPI.W	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	\1,\2,MC68881+OPER
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDM
		
**************************************************************************
*
*	MC68881 FP MOVE FROM CONTROL/STSTUS/INSTRUCTION ADDRESS REGISTER
*	SYNTAX: MOVOUCSI REGISTER,<EA>
*	WHERE: REGISTER=CONTROL, STATUS, OR IADDRESS
*		<EA>=VALID SOURCE ADDRESSING MODE
*	NO REGISTERS MODIFIED OR DESTROYED		
*	VALID ADDRESSING MODES: DN, AN, (AN)+, -(AN), D(AN), D(AN,IX)
*				XXX.W, XXX.L, (D,PC), D(PC,IX)
*
***************************************************************************

MOVOUCSI	MACRO
		IFC	'\3',''
		MOVE.W	#\1+$2000,MC68881+COMMAND
\@NULCA		CMPI.W	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	MC68881+OPER,\2
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		IFNC	'\3',''
		MOVE.W	#\1+$2000,MC68881+COMMAND
\@NULCA		CMPI.W	#$8900,MC68881+RESPONSE
		BEQ.S	\@NULCA
		MOVE.L	MC68881+OPER,\2,\3
\@NULREL	TST.B	MC68881+RESPONSE
		BMI.S	\@NULREL
		ENDC
		ENDM
*****************************************************************************
*
*	MC68881	FSAVE THE INTERNAL OF THE MACHINE
*	THIS IS A PRIVILEDGED INSTRUCTION WHICH IS GENERALLY ONLY USED
*	IN THE OPERATING SYSTEM FOR CONTEXT SWITCHING!
*	SYNTAX: FSAVEST <EA>
*	WHERE: <EA>=PREDECREMENT MODE -(AN)
*	REGISTERS MODIFIED OR DESTROYED A0,D0,D1
*	VALID ADDRESSING MODE -(AN)
*
******************************************************************************
		
FSAVEST		MACRO
\@START		MOVE.W	MC68881+SAVE,D0
		MOVE.W	D0,D1
		ANDI.W	#$FF00,D1
		BEQ.S	\@NULL
		CMPI.W	#$0100,D1
		BEQ.S	\@START
		LEA	MC68881+OPER,A0
		MOVE.B	D0,D1
		LSR.B	#2,D1
		EXT.W	D1
		SUBQ.W	#1,D1
\@LOAD		MOVE.L	(A0),\1
		DBRA	D1,\@LOAD
\@NULL		SWAP	D0
		MOVE.L	D0,\1
		ENDM
		

		
		

*******************************************************************************
*
*	MC68881 FNOPP COMMAND
*
*	SYNTAX: FNOPP
*
*	NO REGISTERS MODIFIED OR DESTROYED
*
*****************************************************************************
FNOPP		MACRO
		MOVE.W	#$0000,MC68881+COND
\@NOPAS		TST.B	MC68881+RESPONSE
		BMI.S	\@NOPAS
		ENDM
*****************************************************************************		
*
*	MC68881 FRESTORE OF THE INTERNAL OF THE MACHINE
*	THIS IS A PRIVILEDGED INSTRUCTION WHICH IS GENERALLY ONLY USED
*	IN THE OPERATING SYSTEM FOR CONTEXT SWITCHING!
*	SYNTAX: FRESTRST <EA>
*	WHERE: <EA>=POSTINCREMENT MODE (AN)+
*	REGISTERS MODIFIED OR DESTROYED A0,D0,D1
*	VALID ADDRESSING MODES: (AN)+
*
*****************************************************************************

FRESTRST	MACRO
		MOVE.L	\1,D0
		SWAP	D0
		MOVE.W	D0,MC68881+RESTORE
		MOVE.W	MC68881+RESTORE,D0
		MOVE.W	D0,D1
		ANDI.W	#$FF00,D1
		BEQ.S	\@NULREL
		LEA	MC68881+OPER,A0
		MOVE.B	D0,D1
		LSR.B	#2,D1
		EXT.W	D1
		SUBQ.W	#1,D1
\@LOAD		MOVE.L	\1,(A0)
		DBRA	D1,\@LOAD
\@NULREL	EQU	*
		ENDM
******************************************************************************
		
		ORG	$4C00		;EXAMPLE PROGRAM
START:		NOP
		MOVE.B    #24,D1
		TRAP      #0
		LEA.L 	  $4000,A1
		MEMREGP   FMOVE,(A1),FP1
		REGREG	  FSQRT,FP1,FP4
		REGMEML	  FMOVE,FP4,D0
		NOP
		TRAP	#14
		TRAP	#15
		END	START		; last line of source	

*~Font name~Courier New~
*~Font size~10~
*~Tab type~1~
*~Tab size~4~
